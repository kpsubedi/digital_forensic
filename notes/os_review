
Difference between library call and system call

Library Call:
------------
If possible make a library call, it is just a cost of calling subroutine 

System Call:
------------
Trap into the operating system 
10 times more expensive 

Does this things potentially affect any other processes?
If we need to coordiate with other processes it needs to be a system call.
If it is only going to affect current process it doesnot need to be
a system call.

For Example
-----------
String concatination doesnot need to be system call. There is no other processes in the system care you
are concatinating strings together. It is done using library call.

If we read data from file we need to coordinate to process potentially 
writing data to the same file. In particular, We want to ensure automacity of system call.
There is a porcess attempting to write to the file and you are trying to read the same part 
of the same file. The promise the system has to make is either you see before the file
write started or you see after the write completed. You donot see the file half written.

****************
What is a "FILE"?
Ans: 
How files are stored?
Ans: 
Typically, disk contains multiple partitions. Each partition contains it's own file system. 
We can say file systems are located inside of a disk partition. The parition is usually 
organized into 512-bytes per sector. When the partition is formatted as Ext3, 
consecutive sectors will be grouped into blocks, whose size can range from 
1024 to 4096 bytes (1K to 4K). The blocks are grouped together into block groups,
whose size will be tens of thousands of blocks. 

Each file has data stored in three major locations:
1. Blocks
2. Inodes
3. Directory Entries

A file content is stored in blocks, which are allocated for exclusive use of the file. 
A file is allocated as many blocks as it needs. Ideally, the file will be allocated consecutive blocks, but 
this is not always possible.

The metadata for the file is stored in an I-node structure, which is located in 
an inode table at the beginning of a block group. There are a finite number of inodes 
and each is assigned to a block group. File metadata includes the temporal data 
such as the last modified, last accessed, last changed, and deleted times. 
Metadata also includes the file size, user ID, group ID, permissions, and block 
addresses where the file content is stored.

The addresses of the first 12 blocks are saved in the inode and additional addresses are 
stored externally in blocks, called indirect blocks. If the file requires many blocks and not 
all of the addresses can fit into one indirect block, a double indirect block is used whose 
address is given in the inode. The double indirect block contains addresses of single 
indirect blocks, which contains addresses of blocks with file content. 
There is also a triple indirect address in the inode that adds one more layer of pointers.

The file's name is stored in a directory entry structure (man 2 getdents), which is located in a block allocated to 
the file's parent directory. 


Hard-Drives
===========

PATA (Parallel ATA) connector
SATA (Serial ATA) connector
Drive can be IDE but connectors can be PATA or SATA

CD/DVD 
-------
used same cable but using slightly different protocols
PATAPI or SATAPI

PI = Packet Interface


PCI bus
=======
used I/O Port


DMA
====
- Alternate method of device communication
- Much faster but much harder and requires a lot more setup code

BIOS 
- Basic Input/Output System
ROM
- Read-only Memory (Commonly writable these days)

When power on ==> CPU gets on

- CPU needs to run code 

"where's the code?!"

- Hard-wired to load code from the BIOS ROM at startup.


BIOS and Booting
----------------
Power Off
- Start from the processor of being switched off with the computer switched off there is no power in the system
except for one component that one component is the system clock which is powered by a small battery on the 
motherboard and keep track of the real world time this component however is not really relevant to what we are 
looking 

Power On
- When you press the power button a variety of things happen but the main option is that the processors of powers on
and start trying to execute 
- Remember when a processor which on it must always have some instructions to execute 
- Very few instructions are pre-build into hardware there are very good reasons for this 
 - the main one being software can engineered changed and updated much more easily later on the hardware can be
 - all instructions come from some form of storage 
 - storage built on specific hardware is often referred to as firmware as it's designed specifically 
 for that hardware other instructions are software and come from storage mediums such as flash memory 
 and hard disk drives
 
 Instructions vs. Code
 ----------------------
 Code 
 - Written in text (e.g., C, C#, Java, etc.)
 Instuctions
 - Machine code 0s and 1s (binary) 
 
 
 Processor powered on ==> loads the instruction from BIOS RoM 
 
 Which is Pre-built System (it's firmware), Relatively small, Facilitates loading of software from 
 HDD, USB, and Floppy & more.
 
 Why PC uses BIOS not something more advanced?
 ==> 
 Two things:
 - BIOS is legacy software 
  1. Modern desktops and laptops use UEFL (Unified Extensible Firmware Interface). A lots of UEFI implementations have 
 backwards support for operating systems which are only BIOS compatible 
 2. PC uses BIOS simply because of history 
 - BIOS is not actually that basic despite of its name
 
 What BIOS software does once it has been loaded by the processor?
 1. BIOS starts by checking the basic set of hardwares attached to the processor
 - Checking processor functions
 - Checking memory
 - Detecting / setting up video output
 - Detecting storage devices (e.g., HDD)
 
 Once BIOS is verifies the system is in working condition.
 It scans the list of available storage devices and checks them in turn for a boot section every.
 
 Every Operating System (OS) has a different design loading requirements which would be 
 an impractical number of variations for the BIOS to support instead the BIOS requires the 
 disk to have one of two basic formats which you can use to load something called a bootloader.
 For the legacy reasons the BIOS loaded 512 bytes from the start of a storage device. So 
 bootloaders have to fit in the first 512 bytes of storage.
 
 
 BIOS =====> First-Stage Bootloader (460 bytes) last two bytes: 0x55 0xAA (i.e. 0xAA55) 
 
 
 Disk Formatting
 ===============
 Disk = Any Storage Medium
 Store data = Write to disk
 Retrieve Data = Read from disk,
                 + interpret data
                 + prevent corruption
                 
 
 -------\          /---------
         \        /
           \     /
            \   /
             \ /
 
 The above mechanism is provided by file system.
 
 More than one filesystem can be stored in a single disk. There are many reasons we may want to do. 
 For example, we may want to store two separate operating systems. we may want to split disk into encrypted part 
 and a non-encrypted part. 
 Partitions
 ----------
 - large section of disk
 - Disk partitions contain a single file system information where our partition starts and ends stored in 
 something called a partition table. There are two standards for partition table 1. MBR 2. GPT 
 
 MBR: allows only four partitions, out of four, one is mounted as bootable partition.
 GPT: allows more partitions.
 
 So, our first stage bootloader can read the MBR partition table and find the parititon which is bootable it can read 
 file system from that partition and load the second stage bootloader. 
 
 Second-Stage Bootloader
 -----------------------
 - Almost any size
 - it's just a file in the file system
 - Loaded from the file system
 - Much more sophisticated 
 (though may still make use of BIOS calls)
 - Display additional boot options
 - Determines hardware state
 - Pre-configuration for the OS
 - One-way communication standard necessary (Bootloader to OS)
 
 Multiboot
 ---------
 
 
 
 
 
 
 
 
 
 
 
 
 

