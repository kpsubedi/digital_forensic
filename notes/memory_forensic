Memory Forensic
===============

Tools
******
null@null-VirtualBox:~/test$ apt-cache search volatility
forensics-all - Debian Forensics Environment - essential components (metapackage)
lime-forensics-dkms - kernel module to memory dump (DKMS)
r-cran-fgarch - GNU R package for financial engineering -- fGarch
volatility - advanced memory forensics framework
volatility-tools - generate profiles to Volatility Framework

Installation
------------
1. Using Package Manager 
null@null-VirtualBox:~/test$ sudo apt-get install volatility
[sudo] password for null: 
Reading package lists... Done
Building dependency tree       
Reading state information... Done
volatility is already the newest version (2.5-1).
0 upgraded, 0 newly installed, 0 to remove and 187 not upgraded.

2. Using Source Code



Lecture Notes
*************

Systems Overview
================
-- overview of the operating system structures and hardware components that affect memory analysis

Digital Environment
*******************
-- The underlying hardware ultimately dictates the constraints of what a particular system can do
-- The underlying hardware specifies the instructions that can be executed and the resources that can be accessed
-- Investigators who can identify the unique hardware components of a system and the impact those components 
can have on analysis are the best position to conduct an effective investigation

-- On most platforms, the hardware is accessed through a layer of software called an operating system, which controls
1. processing
2. manages resources
3. facilitates communication with external devices

-- OS must deal with the low-level details of the particular processor, devices, and memory hardware installed in a 
given system
-- typically, OS also implements a set of high-level services and interfaces that define how the hardware can be accessed 
by the user's programs
-- During investigation, we look for artifacts that suspected software or users might have introduced 
into the digital environment try to determine how the digital environment changed in response to those artifacts
-- A digital investigator's familiarity with a system's hardware and operating system provide a valuable frame of 
reference during analysis and event reconstruction



Linux OS
========
ELF Files:
- main executable file format used on Linux systems
- User applications, shared libraries, kernel modules, and the kernel itself are all stored in the ELF format
- To explore the ELF format, we will discuss its data structures and on-disk layout with the help of 
  the <readelf> command.
- <readelf> is distributed with <binutils> and should be installed by default on all Linux distrubutions.
- http://www.skyfree.org/linux/references/ELF_Format.pdf


ELF Header
----------
- located at the very beginning (offset 0) of a file. 
- represented by <Elf32_Ehdr> or <Elf64_Ehdr> data structure for 32-bit or 64-bit files, respectively
- the following structure members are important for analysis:
   1. e_ident: Holds the file identification information. The first four bytes are "\x7fELF", the fifth 
       byte stores whether the file is 32- or 64-bit, and the sixth stores whether the file is in 
       little or bif endian format. You can use this signature to scan thorugh memory dumps and 
       find the beginning of ELF files mapped into RAM
   2. e_type: Tells the file type - whether it is an executable, relocatable image, shared library, or a core dump.
   3. e_entry: Holds the program entry point, which is the address of the first instruction that executes 
       when the program is run
   4. e_phoff, e_phentsize, and e_phnum: Holds the file offset, entry size, and number of program header entries.
   5. e_shoff, e_shentsize, and e_shnum: Holds the file offset, entry size, and number of section header entries.
   6. e_shstrndx: Stores the index within the section header table of the strings that map to section names.
   
   
   $ readelf -h /bin/ls
   
   
Sections
------------

An ELF binary is typically divided into multiple sections.

The <e_shoff> member of the ELF header tells you where the section header entries begin. 
At this offset is an array of <Elf32_Shdr> or <Elf64_Shdr> structures that represent each section within the file. 

$ readelf -S /bin/ls

Packer for Binary File
-----------------------
https://github.com/upx/upx


Program Headers
-------------

e_phoff: member of the ELF header tells you where the program header entries begin.
At this offset is an <Elf32_Phdr> or <Elf64_Phdr> structure. The operating system uses program headers to map the file 
and its sections into the memory at runtime. 

When encountering malicious executables, the program header is often the only information available to the analyst 
to statically analyze the binary. The imporant members of this sections are:

p_type: Describes the type of the segment. Segments are portions of the file that load into memory, and
they contain one or more sections of the file. 
The most common types are PT_LOAD, which describes a segment that must load into memory;
PT_DYNAMIC, which describes the dynamic linking information;
PT_INTERP, which holds the full path to the program interpreter. 




Chapter 7
=========

Most common initial steps in an investigation:
----------------------------------------------
1. Determining what applications are running
2. What they are doing (in terms of access to files, registry keys, and so on)
3. What security context (or privilege level) they have obtained

Learn
-----
How to detect hidden processes?
How to link process to specific user accounts?
How to investigate lateral movement across networks?
How to analyze privilege escalation attacks?

Processes
---------

>>> dt("_EPROCESS")

Basic resources that belong to a process:
- "_EPROCESS" name of the structure that Windows uses to represent a process. 
- They all have one or more threads that execute code
- They all have a table of handles (or file descriptors) to kernel objects such as files, 
   network sockets, and mutexes.
- Each process has its own private virtual memory space that's isolated from other processes.
Inside this memory space, you can find the process executables; its list of loaded modules (DLLs or shared libraries)
and its stack, heaps, and allocated memory regions containing from user input to application-specific data
structures (such as SQL tables, Internet history blogs, and configuration files).
- Windows organizes the memory regions using virtual address descriptors (VADs)


Enumerating Processes in Memory
===============================


Chapter 8
=========
Hunting Malware in Process Memory:
----------------------------------
