Linux Security Model
====================
*********************************
*****    Files          Directories
*****
Read     read           ls

Write    modify         create/delete

Execute  run            cd

*****************************

Accounts: superuser(root), system accounts( mail, apache, bin, uucp etc), and normal user accounts


#ls -l /etc/passwd /etc/shadow

#chmod 644 sample.txt
#chmod u+rw,g+r,o+r sample.txt

#chown test.test sample.txt

In addition to read, write, and execute permissions. *NIX also has 
1. set UID i.e. SUID
2. set GID i.e SGID
3. Sticky BIT 

SUID
****
When SUID permission is set on an executable file, a process that runs this file is granted access based 
on the owner of the file (usally root), instead of the user who is executing. 
null@null-VirtualBox:~$ ls -l /usr/bin/passwd
-rwsr-xr-x 1 root root 54256 Mar 29  2016 /usr/bin/passwd

Set SUID bit

null@null-VirtualBox:~$ ls -l a.out
-rwxrwxr-x 1 null null 8600 Dec 27 16:00 a.out
null@null-VirtualBox:~$ chmod u+s a.out 
null@null-VirtualBox:~$ ls -l a.out 
-rwsrwxr-x 1 null null 8600 Dec 27 16:00 a.out
null@null-VirtualBox:~$ 

Unset SUID bit

$ chmod u-s a.out

Find SUID file

null@null-VirtualBox:~$ find / -perm -4000 -user root -type f -print


SGID
****
Process's effective group ID is changed to the group-owner of the file, and a user is 
granted access based on permissions granted to that group.

null@null-VirtualBox:~/test$ mkdir sample1
null@null-VirtualBox:~/test$ ls -ltr
total 4
drwxrwxr-x 2 null null 4096 Dec 27 16:13 sample1
null@null-VirtualBox:~/test$ sudo groupadd it
[sudo] password for null: 
null@null-VirtualBox:~/test$ chown null:it sample1/
chown: changing ownership of 'sample1/': Operation not permitted
null@null-VirtualBox:~/test$ sudo chown null:it sample1/
null@null-VirtualBox:~/test$ ls -ltr
total 4
drwxrwxr-x 2 null it 4096 Dec 27 16:13 sample1

Create three users with two has group as "it" and one without 


null@null-VirtualBox:~/test$ sudo usermod -G it user1
null@null-VirtualBox:~/test$ sudo usermod -G it user2

when user1 creates a file in sample1, the newly created file has user1 as owner and group. 
If we set sgid bit the original group owner is preserved.

null@null-VirtualBox:~/test$ ls -ltr
total 4
drwxrwxr-x 2 null it 4096 Dec 27 16:13 sample1
null@null-VirtualBox:~/test$ sudo chmod g+s sample1
null@null-VirtualBox:~/test$ ls -ltr
total 4
drwxrwsr-x 2 null it 4096 Dec 27 16:13 sample1
null@null-VirtualBox:~/test$




File System
============
/proc

#cat /proc/cpuinfo

#cat /proc/diskstates

#cat /proc/mounts

#cat /proc/modules
#cat /proc/filesystems
#cat /proc/driver/rtc
#cat /proc/cmdline
#cat /proc/kallsyms

#cat /proc/kcore | strings

#cat /proc/partitions






